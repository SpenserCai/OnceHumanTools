// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AffixProbabilityResponse affix probability response
//
// swagger:model AffixProbabilityResponse
type AffixProbabilityResponse struct {

	// combinations
	// Example: [[1,4,5],[1,4,6],[1,5,6],[4,5,6]]
	Combinations [][]int32 `json:"combinations"`

	// probability
	// Example: 0.0333
	// Required: true
	Probability *float64 `json:"probability"`

	// probability percent
	// Example: 3.33
	// Required: true
	ProbabilityPercent *float64 `json:"probabilityPercent"`

	// slot count
	// Example: 3
	SlotCount int32 `json:"slotCount,omitempty"`

	// target range
	// Example: [1,4,5,6]
	TargetRange []int32 `json:"targetRange"`

	// total combinations
	// Example: 120
	// Required: true
	TotalCombinations *int64 `json:"totalCombinations"`

	// valid combinations
	// Example: 4
	// Required: true
	ValidCombinations *int64 `json:"validCombinations"`
}

// Validate validates this affix probability response
func (m *AffixProbabilityResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProbability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProbabilityPercent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCombinations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidCombinations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AffixProbabilityResponse) validateProbability(formats strfmt.Registry) error {

	if err := validate.Required("probability", "body", m.Probability); err != nil {
		return err
	}

	return nil
}

func (m *AffixProbabilityResponse) validateProbabilityPercent(formats strfmt.Registry) error {

	if err := validate.Required("probabilityPercent", "body", m.ProbabilityPercent); err != nil {
		return err
	}

	return nil
}

func (m *AffixProbabilityResponse) validateTotalCombinations(formats strfmt.Registry) error {

	if err := validate.Required("totalCombinations", "body", m.TotalCombinations); err != nil {
		return err
	}

	return nil
}

func (m *AffixProbabilityResponse) validateValidCombinations(formats strfmt.Registry) error {

	if err := validate.Required("validCombinations", "body", m.ValidCombinations); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this affix probability response based on context it is used
func (m *AffixProbabilityResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AffixProbabilityResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AffixProbabilityResponse) UnmarshalBinary(b []byte) error {
	var res AffixProbabilityResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
