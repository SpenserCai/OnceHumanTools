// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StrengthenProbabilityResponse strengthen probability response
//
// swagger:model StrengthenProbabilityResponse
type StrengthenProbabilityResponse struct {

	// paths
	Paths []*StrengthenPath `json:"paths"`

	// probability
	// Example: 0.75
	// Required: true
	Probability *float64 `json:"probability"`

	// probability percent
	// Example: 75
	// Required: true
	ProbabilityPercent *float64 `json:"probabilityPercent"`

	// successful outcomes
	// Example: 768
	// Required: true
	SuccessfulOutcomes *int64 `json:"successfulOutcomes"`

	// total outcomes
	// Example: 1024
	// Required: true
	TotalOutcomes *int64 `json:"totalOutcomes"`
}

// Validate validates this strengthen probability response
func (m *StrengthenProbabilityResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProbability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProbabilityPercent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccessfulOutcomes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalOutcomes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StrengthenProbabilityResponse) validatePaths(formats strfmt.Registry) error {
	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	for i := 0; i < len(m.Paths); i++ {
		if swag.IsZero(m.Paths[i]) { // not required
			continue
		}

		if m.Paths[i] != nil {
			if err := m.Paths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("paths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StrengthenProbabilityResponse) validateProbability(formats strfmt.Registry) error {

	if err := validate.Required("probability", "body", m.Probability); err != nil {
		return err
	}

	return nil
}

func (m *StrengthenProbabilityResponse) validateProbabilityPercent(formats strfmt.Registry) error {

	if err := validate.Required("probabilityPercent", "body", m.ProbabilityPercent); err != nil {
		return err
	}

	return nil
}

func (m *StrengthenProbabilityResponse) validateSuccessfulOutcomes(formats strfmt.Registry) error {

	if err := validate.Required("successfulOutcomes", "body", m.SuccessfulOutcomes); err != nil {
		return err
	}

	return nil
}

func (m *StrengthenProbabilityResponse) validateTotalOutcomes(formats strfmt.Registry) error {

	if err := validate.Required("totalOutcomes", "body", m.TotalOutcomes); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this strengthen probability response based on the context it is used
func (m *StrengthenProbabilityResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StrengthenProbabilityResponse) contextValidatePaths(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Paths); i++ {

		if m.Paths[i] != nil {

			if swag.IsZero(m.Paths[i]) { // not required
				return nil
			}

			if err := m.Paths[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("paths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StrengthenProbabilityResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StrengthenProbabilityResponse) UnmarshalBinary(b []byte) error {
	var res StrengthenProbabilityResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
