// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CalculateAffixProbabilityHandlerFunc turns a function with the right signature into a calculate affix probability handler
type CalculateAffixProbabilityHandlerFunc func(CalculateAffixProbabilityParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CalculateAffixProbabilityHandlerFunc) Handle(params CalculateAffixProbabilityParams) middleware.Responder {
	return fn(params)
}

// CalculateAffixProbabilityHandler interface for that can handle valid calculate affix probability params
type CalculateAffixProbabilityHandler interface {
	Handle(CalculateAffixProbabilityParams) middleware.Responder
}

// NewCalculateAffixProbability creates a new http.Handler for the calculate affix probability operation
func NewCalculateAffixProbability(ctx *middleware.Context, handler CalculateAffixProbabilityHandler) *CalculateAffixProbability {
	return &CalculateAffixProbability{Context: ctx, Handler: handler}
}

/*
	CalculateAffixProbability swagger:route POST /mod/affix/probability Mod calculateAffixProbability

计算模组词条概率

计算指定词条组合出现的概率
*/
type CalculateAffixProbability struct {
	Context *middleware.Context
	Handler CalculateAffixProbabilityHandler
}

func (o *CalculateAffixProbability) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCalculateAffixProbabilityParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
