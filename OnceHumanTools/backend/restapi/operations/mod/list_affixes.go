// Code generated by go-swagger; DO NOT EDIT.

package mod

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAffixesHandlerFunc turns a function with the right signature into a list affixes handler
type ListAffixesHandlerFunc func(ListAffixesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAffixesHandlerFunc) Handle(params ListAffixesParams) middleware.Responder {
	return fn(params)
}

// ListAffixesHandler interface for that can handle valid list affixes params
type ListAffixesHandler interface {
	Handle(ListAffixesParams) middleware.Responder
}

// NewListAffixes creates a new http.Handler for the list affixes operation
func NewListAffixes(ctx *middleware.Context, handler ListAffixesHandler) *ListAffixes {
	return &ListAffixes{Context: ctx, Handler: handler}
}

/*
	ListAffixes swagger:route GET /mod/affix/list Mod listAffixes

获取词条列表

获取所有可用的模组词条
*/
type ListAffixes struct {
	Context *middleware.Context
	Handler ListAffixesHandler
}

func (o *ListAffixes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListAffixesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
