// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StrengthenProbabilityRequest strengthen probability request
//
// swagger:model StrengthenProbabilityRequest
type StrengthenProbabilityRequest struct {

	// initial levels
	// Example: [1,2,3,1]
	// Required: true
	// Max Items: 4
	// Min Items: 4
	InitialLevels []int32 `json:"initialLevels"`

	// true表示顺序无关模式，false表示位置对应模式
	OrderIndependent *bool `json:"orderIndependent,omitempty"`

	// show paths
	ShowPaths *bool `json:"showPaths,omitempty"`

	// target levels
	// Example: [3,4,5,2]
	// Required: true
	// Max Items: 4
	// Min Items: 4
	TargetLevels []int32 `json:"targetLevels"`
}

// Validate validates this strengthen probability request
func (m *StrengthenProbabilityRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitialLevels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetLevels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StrengthenProbabilityRequest) validateInitialLevels(formats strfmt.Registry) error {

	if err := validate.Required("initialLevels", "body", m.InitialLevels); err != nil {
		return err
	}

	iInitialLevelsSize := int64(len(m.InitialLevels))

	if err := validate.MinItems("initialLevels", "body", iInitialLevelsSize, 4); err != nil {
		return err
	}

	if err := validate.MaxItems("initialLevels", "body", iInitialLevelsSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(m.InitialLevels); i++ {

		if err := validate.MinimumInt("initialLevels"+"."+strconv.Itoa(i), "body", int64(m.InitialLevels[i]), 1, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("initialLevels"+"."+strconv.Itoa(i), "body", int64(m.InitialLevels[i]), 5, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *StrengthenProbabilityRequest) validateTargetLevels(formats strfmt.Registry) error {

	if err := validate.Required("targetLevels", "body", m.TargetLevels); err != nil {
		return err
	}

	iTargetLevelsSize := int64(len(m.TargetLevels))

	if err := validate.MinItems("targetLevels", "body", iTargetLevelsSize, 4); err != nil {
		return err
	}

	if err := validate.MaxItems("targetLevels", "body", iTargetLevelsSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(m.TargetLevels); i++ {

		if err := validate.MinimumInt("targetLevels"+"."+strconv.Itoa(i), "body", int64(m.TargetLevels[i]), 1, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("targetLevels"+"."+strconv.Itoa(i), "body", int64(m.TargetLevels[i]), 5, false); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this strengthen probability request based on context it is used
func (m *StrengthenProbabilityRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StrengthenProbabilityRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StrengthenProbabilityRequest) UnmarshalBinary(b []byte) error {
	var res StrengthenProbabilityRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
