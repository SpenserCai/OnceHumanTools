// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AffixProbabilityRequest affix probability request
//
// swagger:model AffixProbabilityRequest
type AffixProbabilityRequest struct {

	// show combinations
	ShowCombinations *bool `json:"showCombinations,omitempty"`

	// slot count
	// Example: 3
	// Required: true
	// Maximum: 10
	// Minimum: 1
	SlotCount *int32 `json:"slotCount"`

	// target affix ids
	// Example: [1,4,5,6]
	// Required: true
	// Min Items: 1
	TargetAffixIds []int32 `json:"targetAffixIds"`
}

// Validate validates this affix probability request
func (m *AffixProbabilityRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSlotCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetAffixIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AffixProbabilityRequest) validateSlotCount(formats strfmt.Registry) error {

	if err := validate.Required("slotCount", "body", m.SlotCount); err != nil {
		return err
	}

	if err := validate.MinimumInt("slotCount", "body", int64(*m.SlotCount), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("slotCount", "body", int64(*m.SlotCount), 10, false); err != nil {
		return err
	}

	return nil
}

func (m *AffixProbabilityRequest) validateTargetAffixIds(formats strfmt.Registry) error {

	if err := validate.Required("targetAffixIds", "body", m.TargetAffixIds); err != nil {
		return err
	}

	iTargetAffixIdsSize := int64(len(m.TargetAffixIds))

	if err := validate.MinItems("targetAffixIds", "body", iTargetAffixIdsSize, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this affix probability request based on context it is used
func (m *AffixProbabilityRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AffixProbabilityRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AffixProbabilityRequest) UnmarshalBinary(b []byte) error {
	var res AffixProbabilityRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
